#include "echohandler.h"
#include <string>
#include <iostream>
#include <unistd.h>
#include <string.h> //strlen
#include <fcntl.h>
#include <cerrno>

using namespace std;

void EchoHandler::handle(thread_data th)
{
    cout << th.client_address << endl;
    cout << th.socket << endl;


    //TODO SELECT!!!

    char buffer[1025];
    struct sockaddr_storage ipaddr;
    int addrlen = sizeof(ipaddr);
    int valread;

    fd_set rfds;
    timeval to;
    //TODO aus config lesen
    to.tv_sec=300;
    to.tv_usec = 0;
    int select_res;

    FD_ZERO(&rfds);
    FD_SET(th.socket,&rfds);
    /*while(true){



        cout << "no select" <<endl;


        select_res = select(th.socket+1,&rfds,nullptr,nullptr,&to);

        if (select_res == 0){
            cerr << "timeout encountered" << endl;
            continue;
        }


        if (FD_ISSET(th.socket, &rfds)){
            cout << "select works" << select_res << "socket" << th.socket <<endl;
            if((valread = read(th.socket,buffer,1024)) == 0){
                cout << "client message: " << buffer;

                //Somebody disconnectedm get his details and print
                //getpeername(th.socket, (struct sockaddr*) &ipaddr,(socklen_t*)&addrlen);
                //cout << "Somebody disconnected!" << endl << "socket_fd is:" << th.socket << endl;
                     //<< "ip is: " << inet_ntoa(ipaddr.sin_addr) << endl
                     //<< "port is: " << ntohs(ipaddr.sin_port) << endl;

                //close connection and mark as -1 for reuse
                //close(th.socket);
                //th.socket = -1;
                //cout << "fuck me" << endl;
                //return;
            }else{
                //set the string termination NULL Byte on the end of the data read
                buffer[valread] = '\0';
                send(th.socket,buffer,strlen(buffer),0);
                memset(buffer, 0, sizeof buffer);
                FD_CLR(th.socket,&rfds);
            }

        }
    }*/

    /* Call select() */
    /* http://developerweb.net/viewtopic.php?id=2933 */
    int socket_fd = th.socket;
    int result; int iof = -1;
    fd_set readset;
    string anfrage="";

    do {
       FD_ZERO(&readset);
       FD_SET(socket_fd, &readset);
       result = select(socket_fd + 1, &readset, NULL, NULL, &to);
       cout << "test" << endl;
    } while (result == -1 && errno == EINTR);

    if (result == 0){
        cerr << "Error" << __func__ << "timeout select=" << socket_fd << " client=" << th.client_address;

        throw "expection timeout";
    }

    int readval;
    if (result > 0) {
       if (FD_ISSET(socket_fd, &readset)) {
          /* The socket_fd has data available to be read */

          /* Set Socket to NONBLOCK */
          if ((iof = fcntl(socket_fd, F_GETFL, 0)) != -1)
                    fcntl(socket_fd, F_SETFL, iof | O_NONBLOCK);

          while((readval=recv(socket_fd, buffer, sizeof(buffer), 0)) > 0){
              anfrage.append(string(buffer).substr(0,readval));
          }
          /* set socket normal again */
          if (iof != -1){
              fcntl(socket_fd, F_SETFL, iof);
          }

          if (result == 0) {
             /* This means the other side closed the socket */
             close(socket_fd);
          }
          else {
             /* I leave this part to your own implementation */
              //select vor send
              send(th.socket,anfrage.c_str(),strlen(anfrage.c_str()),0);
              close(th.socket);
          }
       }
    }



    return;
}
